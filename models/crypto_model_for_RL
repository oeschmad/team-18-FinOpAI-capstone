import yfinance as yf
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, Conv1D, MaxPooling1D
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Set professional matplotlib style
plt.style.use('ggplot')  # Replaced 'seaborn' with 'ggplot' which is always available

def prepare_crypto_data(ticker, start_date, end_date):
    """Download and enhance cryptocurrency data with technical features"""
    df = yf.download(ticker, start=start_date, end=end_date)[['Close', 'Volume']]
    
    # Technical indicators
    df['SMA_15'] = df['Close'].rolling(15).mean()
    df['EMA_20'] = df['Close'].ewm(span=20).mean()
    df['Daily_Return'] = df['Close'].pct_change()
    df['Volatility'] = df['Daily_Return'].rolling(7).std()
    
    # Lag features
    for lag in [1, 3, 7]:
        df[f'Lag_{lag}'] = df['Close'].shift(lag)
    
    # Volume features
    df['Volume_MA'] = df['Volume'].rolling(5).mean()
    
    return df.dropna()

def build_hybrid_model(input_shape):
    """Create CNN-LSTM hybrid model"""
    model = Sequential([
        Conv1D(64, 3, activation='relu', input_shape=input_shape),
        MaxPooling1D(2),
        LSTM(128, return_sequences=True),
        Dropout(0.3),
        LSTM(64),
        Dropout(0.2),
        Dense(1)
    ])
    model.compile(optimizer=Adam(learning_rate=0.001),
                 loss='mse',
                 metrics=['mae'])
    return model

def plot_actual_vs_predicted(actual, predicted, tickers):
    """Professional visualization of actual vs predicted returns"""
    fig, axes = plt.subplots(len(tickers), 1, figsize=(14, 5*len(tickers)))
    
    if len(tickers) == 1:
        axes = [axes]
    
    for idx, ticker in enumerate(tickers):
        ax = axes[idx]
        
        # Plot lines with improved colors
        ax.plot(actual.index, actual[ticker], 
                label='Actual', linewidth=2, color='#2c7bb6')
        ax.plot(predicted.index, predicted[ticker], 
                label='Predicted', linestyle='--', linewidth=1.5, color='#d7191c')
        
        # Formatting
        ax.set_title(f"{ticker} - Actual vs Predicted Returns", pad=20, fontsize=14)
        ax.set_ylabel('Daily Returns (%)', fontsize=12)
        ax.legend(fontsize=12)
        ax.grid(True, alpha=0.3)
        
        # Date formatting
        ax.xaxis.set_major_locator(mdates.MonthLocator())
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
        
        # Metrics annotation
        mae = mean_absolute_error(actual[ticker], predicted[ticker])
        r2 = r2_score(actual[ticker], predicted[ticker])
        ax.annotate(f'MAE: {mae:.4f}\nRÂ²: {r2:.4f}',
                    xy=(0.02, 0.85), xycoords='axes fraction',
                    bbox=dict(boxstyle='round', facecolor='white', alpha=0.8),
                    fontsize=11)
    
    plt.tight_layout()
    plt.show()

def forecast_crypto_returns(tickers=['BTC-USD', 'ETH-USD'], 
                          start_date='2021-01-01',
                          end_date='2023-12-31',
                          forecast_days=30,
                          seq_length=60):
    """Main forecasting pipeline with enhanced evaluation"""
    
    # Data storage
    all_actual = []
    all_pred = []
    forecast_results = {}
    metrics = {}
    
    for ticker in tickers:
        # 1. Prepare data
        df = prepare_crypto_data(ticker, start_date, end_date)
        features = ['Close', 'SMA_15', 'EMA_20', 'Volatility'] + [f'Lag_{lag}' for lag in [1,3,7]]
        
        # 2. Scale data
        scaler = MinMaxScaler()
        scaled_data = scaler.fit_transform(df[features])
        
        # 3. Create sequences
        X, y = [], []
        for i in range(seq_length, len(scaled_data)):
            X.append(scaled_data[i-seq_length:i])
            y.append(scaled_data[i, 0])  # Predict Close price
        X, y = np.array(X), np.array(y)
        
        # 4. Train-test split
        split = int(0.8 * len(X))
        X_train, X_test = X[:split], X[split:]
        y_train, y_test = y[:split], y[split:]
        
        # 5. Build and train model
        model = build_hybrid_model((seq_length, len(features)))
        print(f"\nTraining model for {ticker}...")
        history = model.fit(X_train, y_train,
                          validation_data=(X_test, y_test),
                          epochs=20,
                          batch_size=32,
                          verbose=1)
        
        # 6. Evaluate on test set
        test_pred = model.predict(X_test)
        
        # Inverse transform predictions
        test_pred_full = np.zeros((len(test_pred), len(features)))
        test_pred_full[:,0] = test_pred.flatten()
        test_pred = scaler.inverse_transform(test_pred_full)[:,0]
        
        # Get actual values
        y_test_full = np.zeros((len(y_test), len(features)))
        y_test_full[:,0] = y_test.flatten()
        y_test_actual = scaler.inverse_transform(y_test_full)[:,0]
        
        # Store results
        test_dates = df.index[-len(y_test):]
        all_actual.append(pd.DataFrame(y_test_actual, index=test_dates, columns=[ticker]))
        all_pred.append(pd.DataFrame(test_pred, index=test_dates, columns=[ticker]))
        
        metrics[ticker] = {
            'MAE': mean_absolute_error(y_test_actual, test_pred),
            'R2': r2_score(y_test_actual, test_pred)
        }
        
        # 7. Generate forecasts
        last_sequence = scaled_data[-seq_length:]
        forecast = []
        for _ in range(forecast_days):
            pred = model.predict(last_sequence[np.newaxis, ...])[0][0]
            forecast.append(pred)
            
            # Update sequence
            new_row = np.concatenate([[pred], last_sequence[-1, 1:]])
            last_sequence = np.vstack([last_sequence[1:], new_row])
        
        forecast_prices = scaler.inverse_transform(
            np.concatenate([np.array(forecast).reshape(-1,1), 
                           np.zeros((len(forecast), len(features)-1))], axis=1)
        )[:,0]
        
        returns = np.diff(forecast_prices) / forecast_prices[:-1]
        dates = pd.date_range(start=df.index[-1] + pd.Timedelta(days=1), periods=forecast_days-1)
        forecast_results[ticker] = pd.Series(returns, index=dates)
    
    # 8. Visualizations
    actual_combined = pd.concat(all_actual, axis=1)
    pred_combined = pd.concat(all_pred, axis=1)
    plot_actual_vs_predicted(actual_combined, pred_combined, tickers)
    
    # 9. Print results
    print("\nModel Performance Metrics:")
    print(pd.DataFrame(metrics).T)
    
    return pd.DataFrame(forecast_results)

# Execute the pipeline
if __name__ == "__main__":
    predictions = forecast_crypto_returns(
        tickers=['BTC-USD', 'ETH-USD', 'BNB-USD', 'SOL-USD'],
        start_date='2021-01-01',
        end_date='2023-12-31',
        forecast_days=30
    )
    
    print("\nForecasted Returns:")
    print(predictions.head())
